import json
from pathlib import Path
from typing import Dict, Any

from colander_data_converter.base.models import CommonEntitySuperType, CommonEntitySuperTypes
from colander_data_converter.base.types.base import CommonEntityType
from colander_data_converter.converters.misp.models import Mapping
from colander_data_converter.converters.stix2.mapping import Stix2MappingLoader

CODE_HEADER = "# Automatically generated by generate_types.py. Do not edit manually.\n"
DOC_HEADER = ".. Automatically generated by generate_types.py. Do not edit manually.\n\n"

data_dir = Path(__file__).parent.joinpath("docs").joinpath("data")
misp_mapping = Mapping()
stix2_mapping = Stix2MappingLoader()


def get_misp_conversion(entity_super_type: CommonEntitySuperType, entity_type: CommonEntityType) -> Dict[str, Any]:
    conversion: Dict[str, Any] = {
        "supported": False,
    }
    entity_mapping = misp_mapping.get_mapping(entity_super_type, entity_type)
    if entity_mapping:
        conversion["supported"] = True
        conversion["misp_object"] = entity_mapping.misp_object
        conversion["misp_type"] = entity_mapping.misp_type
    return conversion


def get_stix2_conversion(entity_super_type: CommonEntitySuperType, entity_type: CommonEntityType) -> Dict[str, Any]:
    conversion: Dict[str, Any] = {
        "supported": False,
    }
    entity_mapping = stix2_mapping.get_entity_subtype_mapping(entity_super_type.short_name, entity_type.short_name)
    if entity_mapping:
        conversion["supported"] = True
        conversion["stix2_type"] = entity_mapping.get("stix2_type")
    return conversion


if __name__ == "__main__":
    types = [
        CommonEntitySuperTypes.ACTOR.value,
        CommonEntitySuperTypes.ARTIFACT.value,
        CommonEntitySuperTypes.DATA_FRAGMENT.value,
        CommonEntitySuperTypes.DETECTION_RULE.value,
        CommonEntitySuperTypes.DEVICE.value,
        CommonEntitySuperTypes.EVENT.value,
        CommonEntitySuperTypes.OBSERVABLE.value,
        CommonEntitySuperTypes.THREAT.value,
    ]
    matrix = {
        t.short_name: {
            "super_type": t.model_dump(mode="json"),
            "types": {
                u.value.short_name: {
                    "type": u.value.model_dump(mode="json"),
                    "misp": {},
                    "stix2": {},
                }
                for u in t.types
            },
        }
        for t in types
    }
    for entity_super_type in types:
        for entity_type in entity_super_type.types:
            matrix[entity_super_type.short_name]["types"][entity_type.value.short_name]["misp"] = get_misp_conversion(
                entity_super_type, entity_type.value
            )
            matrix[entity_super_type.short_name]["types"][entity_type.value.short_name]["stix2"] = get_stix2_conversion(
                entity_super_type, entity_type.value
            )

    with data_dir.joinpath("conversion_matrix.json").open("w") as f:
        json.dump(matrix, f)
