import enum

from pydantic import field_validator

from .base import CommonEntityType, load_entity_supported_types

__all__ = ["DeviceType", "DeviceTypes"]


class DeviceType(CommonEntityType):
    """
    DeviceType represents metadata for devices in Colander. Check :ref:`the list of supported types <device_types>`.

    Example:
        >>> device_type = DeviceTypes.MOBILE.value
        >>> print(device_type.name)
        Mobile device
    """

    @field_validator("short_name", mode="before")
    @classmethod
    def is_supported_type(cls, short_name: str):
        if short_name not in {t["short_name"] for t in load_entity_supported_types("device")}:
            raise ValueError(f"{short_name} is not supported")
        return short_name


class DeviceTypes(enum.Enum):
    """
    DeviceTypes provides access to all supported device types.

    This class loads device type definitions from the device types JSON file and exposes them as an enum.
    It also provides a method to look up a device type by its short name.

    Example:
        >>> device_type = DeviceTypes.LAPTOP.value
        >>> print(device_type.name)
        Laptop
        >>> default_type = DeviceTypes.by_short_name("nonexistent")
        >>> print(default_type.name)
        Generic
    """

{% for t in types|sort(attribute='short_name') %}
    {{ t.short_name }} = DeviceType(**{{ t }})
    """{{ t.name }} - {{ t.description }}"""
{% endfor %}
    default = GENERIC  # type: ignore[attr-defined]

    @classmethod
    def by_short_name(cls, short_name: str):
        sn = short_name.replace(" ", "_").upper()
        if sn in cls._member_names_:
            return cls[sn].value
        return cls.default.value

    @classmethod
    def suggest(cls, value: str) -> DeviceType:
        return cls.by_short_name(value)
